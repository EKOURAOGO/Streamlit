import streamlit as st
import random

# Configuration de la page
st.set_page_config(page_title="QCM Statistiques", page_icon="üìä")

# Base de questions avec th√®mes
questions = [
    {
        "theme": "Probabilit√©s",
        "question": "Quelle est la probabilit√© de tirer un As dans un jeu de 52 cartes ?",
        "options": ["1/13", "1/52", "1/4", "1/10"],
        "answer": "1/13",
        "explanation": "Il y a 4 As dans un jeu de 52 cartes, donc la probabilit√© est de 4/52 = 1/13."
    },
    {
        "theme": "Probabilit√©s",
        "question": "Que signifie la loi des grands nombres ?",
        "options": [
            "Les grands nombres sont plus probables",
            "Les r√©sultats d'un grand nombre d'exp√©riences convergent vers la probabilit√© th√©orique",
            "Plus il y a d'exp√©riences, plus les √©carts augmentent",
            "Il n'y a pas de lien entre les grands nombres et la probabilit√©"
        ],
        "answer": "Les r√©sultats d'un grand nombre d'exp√©riences convergent vers la probabilit√© th√©orique",
        "explanation": "La loi des grands nombres indique que plus on r√©p√®te une exp√©rience, plus la moyenne des r√©sultats obtenus se rapproche de la valeur attendue."
    },
    {
        "theme": "Statistiques descriptives",
        "question": "Comment calcule-t-on la m√©diane d'une s√©rie statistique ?",
        "options": [
            "La somme des donn√©es divis√©e par le nombre total de donn√©es",
            "Le nombre le plus fr√©quent",
            "La valeur qui divise la s√©rie en deux parties √©gales",
            "La diff√©rence entre la valeur maximale et la valeur minimale"
        ],
        "answer": "La valeur qui divise la s√©rie en deux parties √©gales",
        "explanation": "La m√©diane est la valeur centrale d'une s√©rie de donn√©es tri√©e. Elle divise la s√©rie en deux parties √©gales."
    },
    {
        "theme": "Statistiques descriptives",
        "question": "Que repr√©sente l'√©cart-type ?",
        "options": [
            "La diff√©rence entre la valeur maximale et minimale",
            "La moyenne des donn√©es",
            "La dispersion des donn√©es autour de la moyenne",
            "Le point de d√©part de la s√©rie statistique"
        ],
        "answer": "La dispersion des donn√©es autour de la moyenne",
        "explanation": "L'√©cart-type mesure la dispersion des donn√©es, c'est-√†-dire √† quel point les valeurs s'√©cartent de la moyenne."
    }
]

# Initialisation de l'√©tat pour suivre la progression
if 'score' not in st.session_state:
    st.session_state.score = 0
    st.session_state.current_question_index = 0
    st.session_state.answered_questions = []

# Choisir un th√®me dans la barre lat√©rale
st.sidebar.title("Filtres")
theme = st.sidebar.selectbox("Choisissez un th√®me :", options=["Tous", "Probabilit√©s", "Statistiques descriptives"])

# Filtrer les questions selon le th√®me
if theme != "Tous":
    filtered_questions = [q for q in questions if q["theme"] == theme]
else:
    filtered_questions = questions

# Fonction pour choisir une nouvelle question al√©atoire
def next_question():
    remaining_questions = [i for i in range(len(filtered_questions)) if i not in st.session_state.answered_questions]
    if remaining_questions:
        st.session_state.current_question_index = random.choice(remaining_questions)

# Si toutes les questions ont √©t√© pos√©es, afficher le score final
if len(st.session_state.answered_questions) == len(filtered_questions) and len(filtered_questions) > 0:
    st.write("üéâ F√©licitations, vous avez termin√© le quiz !")
    st.write(f"Votre score final est : {st.session_state.score} / {len(filtered_questions)}")
    st.stop()

# S√©lection d'une nouvelle question si n√©cessaire
if len(filtered_questions) > 0:
    current_question = filtered_questions[st.session_state.current_question_index]
    st.write(current_question["question"])

    # Affichage des options de r√©ponse
    user_answer = st.radio("Choisissez une r√©ponse :", current_question["options"])

    # Bouton pour soumettre la r√©ponse
    if st.button("Soumettre"):
        if user_answer == current_question["answer"]:
            st.success("Bonne r√©ponse !")
            st.session_state.score += 1
        else:
            st.error(f"Mauvaise r√©ponse. La bonne r√©ponse √©tait {current_question['answer']}.")
        st.info(f"Explication : {current_question['explanation']}")

        # Ajouter la question actuelle √† la liste des questions r√©pondues
        st.session_state.answered_questions.append(st.session_state.current_question_index)
        
        # Passer √† la prochaine question
        next_question()

    # Affichage du score actuel
    st.write(f"Score actuel : {st.session_state.score}")

